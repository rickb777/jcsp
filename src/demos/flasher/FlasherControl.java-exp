import jcsp.lang.*;
import jcsp.awt.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

public class FlasherControl implements CSProcess {

  final private long period;
  final private AltingChannelInput mouseEvent;
  final private ChannelOutput appletConfigure;

  public FlasherControl (final long period,
                         final AltingChannelInput mouseEvent,
                         final ChannelOutput appletConfigure) {
    this.period = period;
    this.mouseEvent = mouseEvent;
    this.appletConfigure = appletConfigure;
  }

  private class PanelColour implements ActiveApplet.Configure {
    private Color colour = Color.lightGray;
    public void setColour (Color colour) {
      this.colour = colour;
    }
    public void configure (java.applet.Applet applet) {
      applet.setBackground (colour);
    }
  }
    
  public void run () {

    final Random random = new Random ();
    final Timer tim = new Timer ();

    final Alternative alt = new Alternative (new Guard[] {mouseEvent, tim});
    final int MOUSE = 0;
    final int TIMER = 1;

    final PanelColour[] panelColour = {new PanelColour (), new PanelColour ()};
    final PanelColour panelBlack = new PanelColour ();
    panelBlack.setColour (Color.black);

    appletConfigure.write (panelBlack);

    int index = 0;
    PanelColour panelCol = panelColour[index];
    panelCol.setColour (new Color (random.nextInt ()));

    while (
      ((MouseEvent) mouseEvent.read ()).getID () != MouseEvent.MOUSE_ENTERED
    ) ;

    long timeout = tim.read () + period;
    tim.setAlarm (timeout);
    appletConfigure.write (panelCol);

    boolean running = true;

    while (running) {

      switch (alt.priSelect ()) {

        case MOUSE:
          if (((MouseEvent) mouseEvent.read ()).getID () == MouseEvent.MOUSE_EXITED) {
            appletConfigure.write (panelBlack);
            while (
              ((MouseEvent) mouseEvent.read ()).getID () != MouseEvent.MOUSE_ENTERED
            ) ;
            timeout = tim.read () + period;
            tim.setAlarm (timeout);
            appletConfigure.write (panelCol);
          }
        break;

        case TIMER:
          timeout += period;
          tim.setAlarm (timeout);
          index = 1 - index;
          panelCol = panelColour[index];
          panelCol.setColour (new Color (random.nextInt ()));
          appletConfigure.write (panelCol);
        break;

      }

    }

  }

}
